// Code generated by go-swagger; DO NOT EDIT.

package apimodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LeadsAddResponse leads add response
//
// swagger:model LeadsAddResponse
type LeadsAddResponse struct {

	// embedded
	Embedded *LeadsAddResponseEmbedded `json:"_embedded,omitempty"`
}

// Validate validates this leads add response
func (m *LeadsAddResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeadsAddResponse) validateEmbedded(formats strfmt.Registry) error {
	if swag.IsZero(m.Embedded) { // not required
		return nil
	}

	if m.Embedded != nil {
		if err := m.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this leads add response based on the context it is used
func (m *LeadsAddResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmbedded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeadsAddResponse) contextValidateEmbedded(ctx context.Context, formats strfmt.Registry) error {

	if m.Embedded != nil {
		if err := m.Embedded.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LeadsAddResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LeadsAddResponse) UnmarshalBinary(b []byte) error {
	var res LeadsAddResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LeadsAddResponseEmbedded leads add response embedded
//
// swagger:model LeadsAddResponseEmbedded
type LeadsAddResponseEmbedded struct {

	// leads
	Leads []*LeadsAddResponseEmbeddedLeadsItems0 `json:"leads"`
}

// Validate validates this leads add response embedded
func (m *LeadsAddResponseEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLeads(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeadsAddResponseEmbedded) validateLeads(formats strfmt.Registry) error {
	if swag.IsZero(m.Leads) { // not required
		return nil
	}

	for i := 0; i < len(m.Leads); i++ {
		if swag.IsZero(m.Leads[i]) { // not required
			continue
		}

		if m.Leads[i] != nil {
			if err := m.Leads[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_embedded" + "." + "leads" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this leads add response embedded based on the context it is used
func (m *LeadsAddResponseEmbedded) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLeads(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeadsAddResponseEmbedded) contextValidateLeads(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Leads); i++ {

		if m.Leads[i] != nil {
			if err := m.Leads[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_embedded" + "." + "leads" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LeadsAddResponseEmbedded) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LeadsAddResponseEmbedded) UnmarshalBinary(b []byte) error {
	var res LeadsAddResponseEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LeadsAddResponseEmbeddedLeadsItems0 leads add response embedded leads items0
//
// swagger:model LeadsAddResponseEmbeddedLeadsItems0
type LeadsAddResponseEmbeddedLeadsItems0 struct {

	// id
	ID int64 `json:"id,omitempty"`

	// is deleted
	IsDeleted bool `json:"is_deleted,omitempty"`

	// request id
	RequestID string `json:"request_id,omitempty"`
}

// Validate validates this leads add response embedded leads items0
func (m *LeadsAddResponseEmbeddedLeadsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this leads add response embedded leads items0 based on context it is used
func (m *LeadsAddResponseEmbeddedLeadsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LeadsAddResponseEmbeddedLeadsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LeadsAddResponseEmbeddedLeadsItems0) UnmarshalBinary(b []byte) error {
	var res LeadsAddResponseEmbeddedLeadsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
