// Code generated by go-swagger; DO NOT EDIT.

package apimodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CustomField custom field
//
// swagger:model CustomField
type CustomField struct {

	// code
	Code string `json:"code,omitempty"`

	// entity type
	EntityType string `json:"entity_type,omitempty"`

	// enums
	Enums []*CustomFieldEnum `json:"enums"`

	// group id
	GroupID string `json:"group_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is api only
	IsAPIOnly bool `json:"is_api_only,omitempty"`

	// is deletable
	IsDeletable bool `json:"is_deletable,omitempty"`

	// is predefined
	IsPredefined bool `json:"is_predefined,omitempty"`

	// is required
	IsRequired bool `json:"is_required,omitempty"`

	// is visible
	IsVisible bool `json:"is_visible,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// nested
	Nested []*CustomFieldNested `json:"nested"`

	// remind
	Remind string `json:"remind,omitempty"`

	// required statuses
	RequiredStatuses []*CustomFieldRequiredStatus `json:"required_statuses"`

	// sort
	Sort int64 `json:"sort,omitempty"`

	// tracking callback
	TrackingCallback string `json:"tracking_callback,omitempty"`

	// type
	Type int64 `json:"type,omitempty"`
}

// Validate validates this custom field
func (m *CustomField) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnums(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNested(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredStatuses(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomField) validateEnums(formats strfmt.Registry) error {
	if swag.IsZero(m.Enums) { // not required
		return nil
	}

	for i := 0; i < len(m.Enums); i++ {
		if swag.IsZero(m.Enums[i]) { // not required
			continue
		}

		if m.Enums[i] != nil {
			if err := m.Enums[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enums" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CustomField) validateNested(formats strfmt.Registry) error {
	if swag.IsZero(m.Nested) { // not required
		return nil
	}

	for i := 0; i < len(m.Nested); i++ {
		if swag.IsZero(m.Nested[i]) { // not required
			continue
		}

		if m.Nested[i] != nil {
			if err := m.Nested[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nested" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CustomField) validateRequiredStatuses(formats strfmt.Registry) error {
	if swag.IsZero(m.RequiredStatuses) { // not required
		return nil
	}

	for i := 0; i < len(m.RequiredStatuses); i++ {
		if swag.IsZero(m.RequiredStatuses[i]) { // not required
			continue
		}

		if m.RequiredStatuses[i] != nil {
			if err := m.RequiredStatuses[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("required_statuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this custom field based on the context it is used
func (m *CustomField) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnums(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNested(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequiredStatuses(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomField) contextValidateEnums(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Enums); i++ {

		if m.Enums[i] != nil {
			if err := m.Enums[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("enums" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CustomField) contextValidateNested(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nested); i++ {

		if m.Nested[i] != nil {
			if err := m.Nested[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nested" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CustomField) contextValidateRequiredStatuses(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RequiredStatuses); i++ {

		if m.RequiredStatuses[i] != nil {
			if err := m.RequiredStatuses[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("required_statuses" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomField) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomField) UnmarshalBinary(b []byte) error {
	var res CustomField
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
