// Code generated by go-swagger; DO NOT EDIT.

package apimodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ContactsAddResponse contacts add response
//
// swagger:model ContactsAddResponse
type ContactsAddResponse struct {

	// embedded
	Embedded *ContactsAddResponseEmbedded `json:"_embedded,omitempty"`
}

// Validate validates this contacts add response
func (m *ContactsAddResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactsAddResponse) validateEmbedded(formats strfmt.Registry) error {
	if swag.IsZero(m.Embedded) { // not required
		return nil
	}

	if m.Embedded != nil {
		if err := m.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this contacts add response based on the context it is used
func (m *ContactsAddResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmbedded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactsAddResponse) contextValidateEmbedded(ctx context.Context, formats strfmt.Registry) error {

	if m.Embedded != nil {
		if err := m.Embedded.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContactsAddResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactsAddResponse) UnmarshalBinary(b []byte) error {
	var res ContactsAddResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ContactsAddResponseEmbedded contacts add response embedded
//
// swagger:model ContactsAddResponseEmbedded
type ContactsAddResponseEmbedded struct {

	// contacts
	Contacts []*ContactsAddResponseEmbeddedContactsItems0 `json:"contacts"`
}

// Validate validates this contacts add response embedded
func (m *ContactsAddResponseEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContacts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactsAddResponseEmbedded) validateContacts(formats strfmt.Registry) error {
	if swag.IsZero(m.Contacts) { // not required
		return nil
	}

	for i := 0; i < len(m.Contacts); i++ {
		if swag.IsZero(m.Contacts[i]) { // not required
			continue
		}

		if m.Contacts[i] != nil {
			if err := m.Contacts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_embedded" + "." + "contacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this contacts add response embedded based on the context it is used
func (m *ContactsAddResponseEmbedded) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContacts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactsAddResponseEmbedded) contextValidateContacts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Contacts); i++ {

		if m.Contacts[i] != nil {
			if err := m.Contacts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_embedded" + "." + "contacts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContactsAddResponseEmbedded) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactsAddResponseEmbedded) UnmarshalBinary(b []byte) error {
	var res ContactsAddResponseEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ContactsAddResponseEmbeddedContactsItems0 contacts add response embedded contacts items0
//
// swagger:model ContactsAddResponseEmbeddedContactsItems0
type ContactsAddResponseEmbeddedContactsItems0 struct {

	// id
	ID int64 `json:"id,omitempty"`

	// is deleted
	IsDeleted bool `json:"is_deleted,omitempty"`

	// request id
	RequestID string `json:"request_id,omitempty"`
}

// Validate validates this contacts add response embedded contacts items0
func (m *ContactsAddResponseEmbeddedContactsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this contacts add response embedded contacts items0 based on context it is used
func (m *ContactsAddResponseEmbeddedContactsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ContactsAddResponseEmbeddedContactsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactsAddResponseEmbeddedContactsItems0) UnmarshalBinary(b []byte) error {
	var res ContactsAddResponseEmbeddedContactsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
