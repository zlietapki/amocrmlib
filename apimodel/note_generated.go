// Code generated by go-swagger; DO NOT EDIT.

package apimodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Note note
//
// swagger:model Note
type Note struct {

	// account id
	AccountID int64 `json:"account_id,omitempty"`

	// created at
	CreatedAt int64 `json:"created_at,omitempty"`

	// created by
	CreatedBy int64 `json:"created_by,omitempty"`

	// entity id
	EntityID int64 `json:"entity_id,omitempty"`

	// group id
	GroupID int64 `json:"group_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// note type
	NoteType string `json:"note_type,omitempty"`

	// params
	Params *NoteParams `json:"params,omitempty"`

	// responsible user id
	ResponsibleUserID int64 `json:"responsible_user_id,omitempty"`

	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`

	// updated by
	UpdatedBy int64 `json:"updated_by,omitempty"`
}

// Validate validates this note
func (m *Note) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Note) validateParams(formats strfmt.Registry) error {
	if swag.IsZero(m.Params) { // not required
		return nil
	}

	if m.Params != nil {
		if err := m.Params.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this note based on the context it is used
func (m *Note) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Note) contextValidateParams(ctx context.Context, formats strfmt.Registry) error {

	if m.Params != nil {
		if err := m.Params.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("params")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Note) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Note) UnmarshalBinary(b []byte) error {
	var res Note
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
