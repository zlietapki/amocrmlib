// Code generated by go-swagger; DO NOT EDIT.

package apimodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Token token
//
// swagger:model Token
type Token struct {

	// access token
	// Required: true
	AccessToken string `json:"access_token"`

	// access token expire
	// Required: true
	// Format: datetime
	AccessTokenExpire strfmt.DateTime `json:"access_token_expire"`

	// client id
	// Required: true
	ClientID string `json:"client_id"`

	// client secret
	// Required: true
	ClientSecret string `json:"client_secret"`

	// domain
	// Required: true
	Domain string `json:"domain"`

	// redirect uri
	// Required: true
	RedirectURI string `json:"redirect_uri"`

	// refresh token
	// Required: true
	RefreshToken string `json:"refresh_token"`
}

// Validate validates this token
func (m *Token) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessTokenExpire(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientSecret(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRedirectURI(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefreshToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Token) validateAccessToken(formats strfmt.Registry) error {

	if err := validate.RequiredString("access_token", "body", m.AccessToken); err != nil {
		return err
	}

	return nil
}

func (m *Token) validateAccessTokenExpire(formats strfmt.Registry) error {

	if err := validate.Required("access_token_expire", "body", strfmt.DateTime(m.AccessTokenExpire)); err != nil {
		return err
	}

	if err := validate.FormatOf("access_token_expire", "body", "datetime", m.AccessTokenExpire.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Token) validateClientID(formats strfmt.Registry) error {

	if err := validate.RequiredString("client_id", "body", m.ClientID); err != nil {
		return err
	}

	return nil
}

func (m *Token) validateClientSecret(formats strfmt.Registry) error {

	if err := validate.RequiredString("client_secret", "body", m.ClientSecret); err != nil {
		return err
	}

	return nil
}

func (m *Token) validateDomain(formats strfmt.Registry) error {

	if err := validate.RequiredString("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *Token) validateRedirectURI(formats strfmt.Registry) error {

	if err := validate.RequiredString("redirect_uri", "body", m.RedirectURI); err != nil {
		return err
	}

	return nil
}

func (m *Token) validateRefreshToken(formats strfmt.Registry) error {

	if err := validate.RequiredString("refresh_token", "body", m.RefreshToken); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this token based on context it is used
func (m *Token) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Token) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Token) UnmarshalBinary(b []byte) error {
	var res Token
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
