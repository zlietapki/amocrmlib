// Code generated by go-swagger; DO NOT EDIT.

package apimodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Lead lead
//
// swagger:model Lead
type Lead struct {

	// embedded
	Embedded *LeadEmbedded `json:"_embedded,omitempty"`

	// account id
	AccountID int64 `json:"account_id,omitempty"`

	// closed at
	ClosedAt int64 `json:"closed_at,omitempty"`

	// created at
	CreatedAt int64 `json:"created_at,omitempty"`

	// created by
	CreatedBy int64 `json:"created_by,omitempty"`

	// custom fields values
	CustomFieldsValues []*CustomFieldsValue `json:"custom_fields_values"`

	// group id
	GroupID int64 `json:"group_id,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// is deleted
	IsDeleted bool `json:"is_deleted,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// pipeline id
	PipelineID int64 `json:"pipeline_id,omitempty"`

	// price
	Price int64 `json:"price,omitempty"`

	// responsible user id
	ResponsibleUserID int64 `json:"responsible_user_id,omitempty"`

	// status id
	StatusID int64 `json:"status_id,omitempty"`

	// updated at
	UpdatedAt int64 `json:"updated_at,omitempty"`

	// updated by
	UpdatedBy int64 `json:"updated_by,omitempty"`
}

// Validate validates this lead
func (m *Lead) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomFieldsValues(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Lead) validateEmbedded(formats strfmt.Registry) error {
	if swag.IsZero(m.Embedded) { // not required
		return nil
	}

	if m.Embedded != nil {
		if err := m.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

func (m *Lead) validateCustomFieldsValues(formats strfmt.Registry) error {
	if swag.IsZero(m.CustomFieldsValues) { // not required
		return nil
	}

	for i := 0; i < len(m.CustomFieldsValues); i++ {
		if swag.IsZero(m.CustomFieldsValues[i]) { // not required
			continue
		}

		if m.CustomFieldsValues[i] != nil {
			if err := m.CustomFieldsValues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_fields_values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this lead based on the context it is used
func (m *Lead) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmbedded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCustomFieldsValues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Lead) contextValidateEmbedded(ctx context.Context, formats strfmt.Registry) error {

	if m.Embedded != nil {
		if err := m.Embedded.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

func (m *Lead) contextValidateCustomFieldsValues(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CustomFieldsValues); i++ {

		if m.CustomFieldsValues[i] != nil {
			if err := m.CustomFieldsValues[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("custom_fields_values" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Lead) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Lead) UnmarshalBinary(b []byte) error {
	var res Lead
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LeadEmbedded lead embedded
//
// swagger:model LeadEmbedded
type LeadEmbedded struct {

	// companies
	Companies []*EmbCompany `json:"companies"`

	// tags
	Tags []*EmbTag `json:"tags"`
}

// Validate validates this lead embedded
func (m *LeadEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompanies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeadEmbedded) validateCompanies(formats strfmt.Registry) error {
	if swag.IsZero(m.Companies) { // not required
		return nil
	}

	for i := 0; i < len(m.Companies); i++ {
		if swag.IsZero(m.Companies[i]) { // not required
			continue
		}

		if m.Companies[i] != nil {
			if err := m.Companies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_embedded" + "." + "companies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LeadEmbedded) validateTags(formats strfmt.Registry) error {
	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	for i := 0; i < len(m.Tags); i++ {
		if swag.IsZero(m.Tags[i]) { // not required
			continue
		}

		if m.Tags[i] != nil {
			if err := m.Tags[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_embedded" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this lead embedded based on the context it is used
func (m *LeadEmbedded) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCompanies(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTags(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeadEmbedded) contextValidateCompanies(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Companies); i++ {

		if m.Companies[i] != nil {
			if err := m.Companies[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_embedded" + "." + "companies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *LeadEmbedded) contextValidateTags(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tags); i++ {

		if m.Tags[i] != nil {
			if err := m.Tags[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_embedded" + "." + "tags" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LeadEmbedded) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LeadEmbedded) UnmarshalBinary(b []byte) error {
	var res LeadEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
