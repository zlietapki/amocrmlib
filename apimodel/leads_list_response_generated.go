// Code generated by go-swagger; DO NOT EDIT.

package apimodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LeadsListResponse leads list response
//
// swagger:model LeadsListResponse
type LeadsListResponse struct {

	// embedded
	Embedded *LeadsListResponseEmbedded `json:"_embedded,omitempty"`

	// page
	Page int64 `json:"_page,omitempty"`
}

// Validate validates this leads list response
func (m *LeadsListResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmbedded(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeadsListResponse) validateEmbedded(formats strfmt.Registry) error {
	if swag.IsZero(m.Embedded) { // not required
		return nil
	}

	if m.Embedded != nil {
		if err := m.Embedded.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this leads list response based on the context it is used
func (m *LeadsListResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEmbedded(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeadsListResponse) contextValidateEmbedded(ctx context.Context, formats strfmt.Registry) error {

	if m.Embedded != nil {
		if err := m.Embedded.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("_embedded")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LeadsListResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LeadsListResponse) UnmarshalBinary(b []byte) error {
	var res LeadsListResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// LeadsListResponseEmbedded leads list response embedded
//
// swagger:model LeadsListResponseEmbedded
type LeadsListResponseEmbedded struct {

	// leads
	Leads []*Lead `json:"leads"`
}

// Validate validates this leads list response embedded
func (m *LeadsListResponseEmbedded) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLeads(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeadsListResponseEmbedded) validateLeads(formats strfmt.Registry) error {
	if swag.IsZero(m.Leads) { // not required
		return nil
	}

	for i := 0; i < len(m.Leads); i++ {
		if swag.IsZero(m.Leads[i]) { // not required
			continue
		}

		if m.Leads[i] != nil {
			if err := m.Leads[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_embedded" + "." + "leads" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this leads list response embedded based on the context it is used
func (m *LeadsListResponseEmbedded) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLeads(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LeadsListResponseEmbedded) contextValidateLeads(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Leads); i++ {

		if m.Leads[i] != nil {
			if err := m.Leads[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("_embedded" + "." + "leads" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LeadsListResponseEmbedded) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LeadsListResponseEmbedded) UnmarshalBinary(b []byte) error {
	var res LeadsListResponseEmbedded
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
